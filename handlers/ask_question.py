from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from os import getenv

router = Router()
user_questions = {}
ADMIN_ID = getenv("ADMIN_ID")
SUPPORT_CHAT_ID = int(getenv("SUPPORT_CHAT_ID"))


class FormQuestion(StatesGroup):
    question: str = State()


@router.callback_query(F.data == "ask_question")
async def handle_ask_question(callback: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(
                text="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –≤ –≠–û–°–µ ? ",
                callback_data="eos_access",
            )
        ],
        [
            InlineKeyboardButton(
                text="–Ø –Ω–µ –ø–æ—Å–µ—Ç–∏–ª –≤–æ–¥–Ω—É—é –ª–µ–∫—Ü–∏—é. –ß—Ç–æ –¥–µ–ª–∞—Ç—å ?",
                callback_data="intro_lecture",
            )
        ],
        [
            InlineKeyboardButton(
                text="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ–º–µ—Å—Ç—Ä?",
                callback_data="close_semester",
            )
        ],
        [
            InlineKeyboardButton(
                text="–ì–¥–µ –Ω–∞–π—Ç–∏ –∞—Å—Å–µ—Å—Å–º–µ–Ω—Ç ?", callback_data="assessment_location"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–æ–º ?", callback_data="get_diploma"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü–µ—Ä–µ–≤–µ–ª—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≤—É–∑–∞ –ø–æ—Å–ª–µ –∞–∫–∞–¥–µ–º–∞.–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                callback_data="transfer_recovery",
            )
        ],
        [
            InlineKeyboardButton(
                text="–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å ", callback_data="other_question"
            )
        ],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":',
        reply_markup=keyboard,
    )


@router.callback_query(F.data == "eos_access")
async def handle_aeos_access(callback: CallbackQuery):
    await callback.message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –≤ –≠–û–°–µ, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≠–û–°–∞. "
        "–î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://eos.urfu.ru/support/"
    )


@router.callback_query(F.data == "intro_lecture")
async def handle_intro_lecture(callback: CallbackQuery):
    await callback.message.answer(
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ\n"
        "2. –ó–∞—á–∏—Å–ª–∏—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å –≤ –≠–û–°\n"
        "3. –í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–∞–Ω–∞–ª\n"
    )


@router.callback_query(F.data == "close_semester")
async def handle_assessment_location(callback: CallbackQuery):
    await callback.message.answer(
        "1. C–¥–∞—Ç—å –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n" "2. –°–¥–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
    )


@router.callback_query(F.data == "assessment_location")
async def handle_transfer_recovery(callback: CallbackQuery):
    await callback.message.answer(
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Union Pro, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: –æ—Ç–∫—Ä–æ–π—Ç–µ https://www.unionepro.ru –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.\n"
        "2. –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ email.\n"
        "4. –í–≤–æ–¥ –∫–æ–¥–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
    )


@router.callback_query(F.data == "get_diploma")
async def handle_get_diploma(callback: CallbackQuery):
    await callback.message.answer(
        "–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –°–ü–û –∏–ª–∏ –í–û –¥–∏–ø–ª–æ–º –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏\
        —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–µ –≤—Å–µ—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π, —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ —Ç—Ä–µ—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π\
        –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –°–ü–û –∏–ª–∏ –í–û –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–±—É—á–µ–Ω–∏—è, —Ç–æ –¥–∏–ø–ª–æ–º –≤—ã–¥–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ\
        —Å –¥–∏–ø–ª–æ–º–æ–º –æ –í–û –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–£–ó–∞."
    )


@router.callback_query(F.data == "transfer_recovery")
async def handle_transfer_recovery(callback: CallbackQuery):
    await callback.message.answer(
        "1. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –≠–û–°.\n"
        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ.\n"
        "3. –í—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "4. –í—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–∞–Ω–∞–ª\n"
        "5. –ë—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ —Å–æ —Å–≤–æ–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º\n"
    )


@router.callback_query(F.data == "other_question")
async def handle_other_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –≤ —á–∞—Ç–µ."
        "–ú—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º –∏—Ö –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø–æ—Å—Ç–æ—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ."
    )
    await state.set_state(FormQuestion.question)
    await callback.answer()


@router.message(
    F.chat.id != SUPPORT_CHAT_ID, ~F.reply_to_message, FormQuestion.question
)
async def forward_question_to_group(message: Message, state: FSMContext):
    bot = message.bot
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    question_text = message.text

    if not question_text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º."
        )
        return

    forward = await bot.send_message(
        SUPPORT_CHAT_ID,
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n\n{question_text}",
    )

    user_questions[forward.message_id] = user_id
    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
    await state.clear()


@router.message(F.chat.id == SUPPORT_CHAT_ID, F.reply_to_message)
async def reply_from_group(message: Message):
    bot = message.bot
    replied_msg = message.reply_to_message
    if replied_msg.message_id in user_questions:
        user_id = user_questions[replied_msg.message_id]
        try:
            await bot.send_message(
                user_id, f"üì¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}"
            )
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º.")
